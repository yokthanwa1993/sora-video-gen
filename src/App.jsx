import { useState, useEffect } from 'react'
import { useAuth } from './AuthProvider'
import { LoginPage } from './LoginPage'
import { supabase } from './lib/supabase'
import './App.css'

function App() {
  const { user, loading: authLoading, signOut } = useAuth()
  // ‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏ï‡πâ‡∏ô‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ä‡πâ placeholder ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÅ‡∏ó‡∏ô
  const [prompt, setPrompt] = useState('')
  const [mode, setMode] = useState('t2v')
  const [aspectRatio, setAspectRatio] = useState('16:9')
  const [imagesText, setImagesText] = useState('https://d3adwkbyhxyrtq.cloudfront.net/webassets/videomodels/openai-sora-2-i2v.jpg')
  
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState('')
  const [videoUrl, setVideoUrl] = useState('')
  const [showModal, setShowModal] = useState(false)
  
  const [videos, setVideos] = useState([]) // ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ß‡∏µ‡∏î‡∏µ‡πÇ‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏£‡∏ß‡∏°‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß)

  // ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ß‡∏µ‡∏î‡∏µ‡πÇ‡∏≠‡∏à‡∏≤‡∏Å Supabase ‡πÄ‡∏°‡∏∑‡πà‡∏≠ user login
  useEffect(() => {
    if (user) {
      loadVideos()
    }
  }, [user])

  // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å database ‡∏ó‡∏∏‡∏Å 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ß‡∏µ‡∏î‡∏µ‡πÇ‡∏≠‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà
  useEffect(() => {
    if (!user) return

    const hasLoadingVideos = videos.some(v => v.status === 'loading')
    if (!hasLoadingVideos) return

    console.log('üîÑ Has loading videos, will refresh data every 10 seconds...')

    const refreshInterval = setInterval(() => {
      console.log('üîÑ Refreshing videos from database...')
      loadVideos()
    }, 10000) // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏ó‡∏∏‡∏Å 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

    return () => clearInterval(refreshInterval)
  }, [videos, user])

  // Fallback ‡πÇ‡∏û‡∏•‡∏•‡πå MUAPI ‡∏ú‡πà‡∏≤‡∏ô backend ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ request_id ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ video_url
  useEffect(() => {
    if (!user) return

    const targets = videos.filter(v => v.status === 'loading' && v.request_id && !v.url)
    if (targets.length === 0) return

    let cancelled = false

    const tick = async () => {
      for (const v of targets) {
        try {
          const res = await fetch(`/api/check-status/${v.request_id}`)
          const json = await res.json().catch(() => ({}))
          if (json?.status === 'completed' && json?.url) {
            // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô completed ‡∏ñ‡πâ‡∏≤ column ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö
            try {
              await supabase
                .from('videos')
                .update({ video_url: json.url, status: 'completed' })
                .eq('id', v.id)
            } catch (_) {
              await supabase
                .from('videos')
                .update({ video_url: json.url })
                .eq('id', v.id)
            }

            if (!cancelled) {
              setVideos(prev => prev.map(x => x.id === v.id ? { ...x, url: json.url, status: 'completed' } : x))
            }
          }
        } catch (e) {
          // ignore once and try again on next tick
        }
      }
    }

    // ‡πÇ‡∏û‡∏•‡∏•‡πå‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏£‡∏≠‡∏ö‡πÅ‡∏£‡∏Å ‡πÅ‡∏•‡πâ‡∏ß‡∏ó‡∏∏‡∏Å ‡πÜ 6 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    tick()
    const interval = setInterval(tick, 6000)
    return () => { cancelled = true; clearInterval(interval) }
  }, [videos, user])

  async function loadVideos() {
    try {
      const { data, error } = await supabase
        .from('videos')
        .select('*')
        .eq('user_id', user.id)
        .order('created_at', { ascending: false })

      if (error) {
        console.error('Error loading videos:', error)
        return
      }
      
      // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å database ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö format ‡∏Ç‡∏≠‡∏á state
      const formattedVideos = data.map(v => {
        // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ video_url ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏´‡πâ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤ "‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß" ‡πÅ‡∏°‡πâ status ‡∏à‡∏∞‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô 'loading'
        // ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÅ‡∏™‡∏î‡∏á 'failed' ‡∏´‡∏≤‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
        const derivedStatus = v.status === 'failed'
          ? 'failed'
          : (v.video_url ? 'completed' : (v.status || 'loading'))

        return {
          id: v.id,
          prompt: v.prompt,
          status: derivedStatus,
          url: v.video_url,
          aspectRatio: v.aspect_ratio,
          request_id: v.request_id,
          timestamp: new Date(v.created_at).getTime(),
        }
      })
      
      setVideos(formattedVideos)
    } catch (err) {
      console.error('Error loading videos:', err)
    }
  }

  // Show loading while checking auth
  if (authLoading) {
    return (
      <div style={{ minHeight: '100vh', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>
        <div>Loading...</div>
      </div>
    )
  }

  // Show login page if not authenticated
  if (!user) {
    return <LoginPage />
  }

  async function handleSubmit(e) {
    e.preventDefault()
    if (!prompt.trim() || loading) return
    
    const currentPrompt = prompt.trim()
    
    setLoading(true)
    setError('')
    setVideoUrl('')
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡∏µ‡∏î‡∏µ‡πÇ‡∏≠‡∏•‡∏á Supabase ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏î‡πâ‡∏ß‡∏¢‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ 'loading'
    let videoRecord
    try {
      const insertData = {
        user_id: user.id,
        prompt: currentPrompt,
        aspect_ratio: aspectRatio,
        video_url: '', // ‡πÉ‡∏ä‡πâ empty string ‡πÅ‡∏ó‡∏ô null ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á NOT NULL constraint
      }
      
      // ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏° status ‡∏ñ‡πâ‡∏≤ column ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
      try {
        insertData.status = 'loading'
        const { data, error } = await supabase
          .from('videos')
          .insert([insertData])
          .select()
          .single()
        
        if (error) throw error
        videoRecord = data
      } catch (statusError) {
        // ‡∏ñ‡πâ‡∏≤ error ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ status column ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÉ‡∏™‡πà status
        console.log('Retrying without status column:', statusError)
        delete insertData.status
        const { data, error } = await supabase
          .from('videos')
          .insert([insertData])
          .select()
          .single()
        
        if (error) throw error
        videoRecord = data
      }
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ request_id)
      setVideos(prev => [{
        id: videoRecord.id,
        prompt: currentPrompt,
        status: 'loading',
        aspectRatio,
        request_id: null,
        timestamp: new Date(videoRecord.created_at).getTime(),
      }, ...prev])
      
    } catch (err) {
      console.error('Error saving to database:', err)
      setError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ: ' + err.message)
      setLoading(false)
      return
    }
    
    try {
      const images_list = mode === 'i2v'
        ? imagesText.split(/\n|,/).map((s) => s.trim()).filter(Boolean)
        : []

      console.log('üì§ Sending generation request...')
      
      const res = await fetch('/api/generate', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          prompt: currentPrompt,
          resolution: '720p',
          aspect_ratio: aspectRatio,
          images_list,
          mode,
          videoId: videoRecord.id, // ‡∏™‡πà‡∏á videoId ‡πÑ‡∏õ‡πÉ‡∏´‡πâ Backend
        }),
      })
      
      const data = await res.json()
      
      if (!res.ok) {
        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô failed ‡πÉ‡∏ô database (‡∏ñ‡πâ‡∏≤ column ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà)
        try {
          await supabase
            .from('videos')
            .update({ status: 'failed' })
            .eq('id', videoRecord.id)
        } catch (updateError) {
          console.log('Could not update status (column may not exist):', updateError)
        }
        
        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÉ‡∏ô state
        setVideos(prev => prev.map(v => 
          v.id === videoRecord.id ? { ...v, status: 'failed', error: data?.error || 'Generation failed' } : v
        ))
        throw new Error(data?.error || 'Generation failed')
      }
      
      console.log('‚úÖ Got request_id:', data.requestId)
      
      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å request_id ‡∏•‡∏á database ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÇ‡∏û‡∏•‡∏•‡πå‡∏ï‡πà‡∏≠‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)
      try {
        await supabase
          .from('videos')
          .update({ request_id: data.requestId })
          .eq('id', videoRecord.id)
      } catch (updateError) {
        console.log('Could not update request_id:', updateError)
      }
      
      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó state ‡πÉ‡∏´‡πâ‡∏°‡∏µ request_id ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏û‡∏•‡∏•‡πå‡πÑ‡∏î‡πâ
      setVideos(prev => prev.map(v =>
        v.id === videoRecord.id ? { ...v, request_id: data.requestId } : v
      ))
      
    } catch (err) {
      console.error('‚ùå Error:', err)
      setError(err.message || String(err))
    } finally {
      setLoading(false)
    }
  }

  function openModal(url) {
    setVideoUrl(url)
    setShowModal(true)
  }

  function closeModal() {
    setShowModal(false)
  }

  async function deleteVideo(videoId) {
    if (!confirm('‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ß‡∏µ‡∏î‡∏µ‡πÇ‡∏≠‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?')) return
    
    try {
      const { error } = await supabase
        .from('videos')
        .delete()
        .eq('id', videoId)
      
      if (error) throw error
      
      setVideos(prev => prev.filter(v => v.id !== videoId))
    } catch (err) {
      console.error('Error deleting video:', err)
      alert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏ß‡∏µ‡∏î‡∏µ‡πÇ‡∏≠‡πÑ‡∏î‡πâ')
    }
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏£‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏à‡∏≤‡∏Å MUAPI ‡∏ú‡πà‡∏≤‡∏ô backend
  async function checkNow(video) {
    if (!video?.request_id) return
    try {
      const res = await fetch(`/api/check-status/${video.request_id}`)
      const json = await res.json().catch(() => ({}))
      if (json?.status === 'completed' && json?.url) {
        try {
          await supabase
            .from('videos')
            .update({ video_url: json.url, status: 'completed' })
            .eq('id', video.id)
        } catch (_) {
          await supabase
            .from('videos')
            .update({ video_url: json.url })
            .eq('id', video.id)
        }
        setVideos(prev => prev.map(v => v.id === video.id ? { ...v, url: json.url, status: 'completed' } : v))
      }
    } catch (e) {
      console.warn('Manual check failed:', e?.message || e)
    }
  }

  // deleteAllVideos ‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô

  return (
    <div className="page">
      <div className="hero">
        <div className="brand">
          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '16px' }}>
            <div>
              <span className="badge">Sora 2</span>
            </div>
            <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>
              {user?.user_metadata?.avatar_url && (
                <img 
                  src={user.user_metadata.avatar_url} 
                  alt="Avatar" 
                  style={{ width: '32px', height: '32px', borderRadius: '50%' }}
                />
              )}
              <span style={{ fontSize: '14px', color: '#666' }}>
                {user?.user_metadata?.full_name || user?.email}
              </span>
              <button onClick={signOut} className="link-logout" title="‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö">‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö</button>
            </div>
          </div>
          <span className="badge">Sora 2</span>
          <h1>AI Video Generator</h1>
          <p className="subtitle">‡∏û‡∏¥‡∏°‡∏û‡πå Prompt ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏´‡πâ Sora ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏µ‡∏î‡∏µ‡πÇ‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ö‡∏ö‡∏ó‡∏±‡∏ô‡∏™‡∏°‡∏±‡∏¢</p>
        </div>

        <form className="panel" onSubmit={handleSubmit}>
          <div className="prompt">
            <textarea
              value={prompt}
              onChange={(e) => setPrompt(e.target.value)}
              placeholder="‡∏®‡∏¥‡∏•‡∏õ‡∏¥‡∏ô‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ï‡πâ‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏¢‡∏≤‡∏°‡∏Ñ‡πà‡∏≥ ‡∏ó‡∏±‡∏ô‡∏™‡∏°‡∏±‡∏¢ ‡∏™‡∏î‡πÉ‡∏™ ‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÅ‡∏û‡∏ô‡∏ä‡πâ‡∏≤‡πÜ ‡πÇ‡∏ó‡∏ô‡∏†‡∏≤‡∏û‡∏ô‡∏µ‡∏≠‡∏≠‡∏ô"
              rows={3}
              disabled={loading}
            />
          </div>

          <div className="options">
            <div className="field">
              <label>‡πÇ‡∏´‡∏°‡∏î</label>
              <select value={mode} onChange={(e) => setMode(e.target.value)} disabled={loading}>
                <option value="t2v">Text ‚Üí Video</option>
                <option value="i2v">Image ‚Üí Video</option>
              </select>
            </div>
            <div className="field">
              <label>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</label>
              <span className="chip">720p</span>
              <span className="hint">‡∏Ñ‡∏á‡∏ó‡∏µ‡πà</span>
            </div>
            <div className="field">
              <label>‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô</label>
              <select value={aspectRatio} onChange={(e) => setAspectRatio(e.target.value)} disabled={loading}>
                <option value="16:9">16:9</option>
                <option value="9:16">9:16</option>
              </select>
            </div>
          </div>

          {mode === 'i2v' && (
            <div className="field" style={{ marginTop: 8 }}>
              <label>‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (URLs)</label>
              <textarea
                rows={2}
                placeholder="‡πÅ‡∏õ‡∏∞‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏£‡∏π‡∏õ 1 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ï‡πà‡∏≠ 1 ‡∏£‡∏π‡∏õ ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢ ,"
                value={imagesText}
                onChange={(e) => setImagesText(e.target.value)}
                disabled={loading}
                style={{ width: '100%', background: 'transparent', border: 'none', color: 'inherit' }}
              />
            </div>
          )}

          {error && <div className="error">{error}</div>}

          <div className="panel-actions">
            <button className="primary" type="submit" disabled={!prompt.trim() || loading}>
              {loading ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á...' : '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏µ‡∏î‡∏µ‡πÇ‡∏≠'}
            </button>
          </div>
        </form>
      </div>

      <div className="results">
        {videos.length === 0 ? (
          <div className="empty">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏•‡∏á‡∏≤‡∏ô ‡∏•‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå Prompt ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏µ‡∏î‡∏µ‡πÇ‡∏≠"</div>
        ) : (
          <>
            {/* ‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ñ‡∏π‡∏Å‡∏ô‡∏≥‡∏≠‡∏≠‡∏Å‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡∏Ç‡∏≠ */}
            {videos.map((v) => (
              <div className="card" key={v.id}>
                {/* Status & Metadata - ‡πÅ‡∏™‡∏î‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô */}
                <div className="meta">
                  <div className="meta-left">
                    {v.status === 'loading' && <div className="status running">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á...</div>}
                    {v.status === 'completed' && <div className="status succeeded">‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à</div>}
                    {v.status === 'failed' && <div className="status failed">‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß</div>}
                    <div className="details">
                      <span>10s</span>
                      <span>‚Ä¢</span>
                      <span>720p</span>
                      <span>‚Ä¢</span>
                      <span>{v.aspectRatio}</span>
                    </div>
                  </div>
                  <button 
                    onClick={() => deleteVideo(v.id)}
                    title="‡∏•‡∏ö‡∏ß‡∏µ‡∏î‡∏µ‡πÇ‡∏≠"
                    className="delete-btn"
                  >
                    ‚ùå
                  </button>
                </div>

                {/* Video/Thumbnail Section - ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á */}
                {v.status === 'loading' && (
                  <div className="video skeleton" style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', color: '#666', position: 'relative' }}>
                    ‚è≥
                    {v.request_id && (
                      <button
                        onClick={() => checkNow(v)}
                        style={{ position: 'absolute', right: 10, bottom: 10, fontSize: 12, padding: '4px 8px', borderRadius: 6, border: '1px solid #888', background: 'transparent', color: 'inherit', cursor: 'pointer', opacity: 0.8 }}
                        title="‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ"
                      >‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä</button>
                    )}
                  </div>
                )}
                
                {v.status === 'completed' && v.url && (
                  <video
                    className="video"
                    src={v.url}
                    controls
                    playsInline
                    onClick={() => openModal(v.url)}
                    style={{ cursor: 'pointer' }}
                  />
                )}
                
                {v.status === 'failed' && (
                  <div className="video" style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', background: '#2a1a1a', color: '#ff9c9c', minHeight: '200px' }}>
                    ‚ö†Ô∏è {v.error || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î'}
                  </div>
                )}

                {/* Prompt Text - ‡πÅ‡∏™‡∏î‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á */}
                <div className="prompt-text" title={v.prompt}>{v.prompt}</div>
              </div>
            ))}
          </>
        )}
      </div>

      {/* footer removed as requested */}

      {showModal && (
        <div className="modal" role="dialog" aria-modal="true">
          <div className="backdrop" onClick={closeModal} />
          <div className="modal-body">
            <button className="modal-close" onClick={closeModal}>√ó</button>
            {videoUrl ? (
              <video src={videoUrl} controls autoPlay style={{ width: '100%', borderRadius: 12 }} />
            ) : (
              <div style={{ padding: 20 }}>No video</div>
            )}
          </div>
        </div>
      )}
    </div>
  )
}

export default App
